import { Queue, Worker } from "bullmq";
import { db } from "./lib/db.js";
import {
  clusterApiUrl,
  Connection,
  Keypair,
  LAMPORTS_PER_SOL,
  PublicKey,
  sendAndConfirmTransaction,
  SystemProgram,
  Transaction,
} from "@solana/web3.js";
import dotenv from "dotenv";
import { convertDollarToSOL, convertToValidLamports } from "./lib/sol3.js";
import bs58 from "bs58";
dotenv.config();

const payoutQueue = new Queue("payout-queue", {
  connection: {
    host: "127.0.0.1",
    port: 6379,
  },
});

export async function putItemInPayoutQueue(id: string) {
  // ! Send payout id here
  const res = await payoutQueue.add(
    "payment out",
    {
      id,
    },
    // TODO: remove this after moving the producton
    // { delay: 30 * 60 * 100 }
    { delay: 10 * 100 }
  );
}

const payoutWorker = new Worker(
  "payout-queue",
  async (job) => {
    console.log(job.data);
    // if (1 == 1) return;
    const payout = await db.payout.findUnique({
      where: {
        id: job.data.id,
      },
    });
    console.log(`we are till here`);
    if (!payout || payout.status !== "PRE_PROCESSING") return;
    console.log(`we are till here now finally`);

    const user = await db.user.findUnique({
      where: {
        username: payout.generatedTo,
      },
    });
    const organization = await db.organization.findUnique({
      where: {
        id: payout.organizationId,
      },
    });
    await db.$transaction(async (tx) => {
      if (!user || !user.publicKey) {
        await tx.payout.update({
          where: { id: payout.id },
          data: {
            status: "UNCOLLECTED",
          },
        });
        return;
      }
      if (
        !organization ||
        organization.balance < payout.amount ||
        !organization.id
      ) {
        await tx.payout.update({
          where: { id: payout.id },
          data: {
            status: "FAILED",
          },
        });
        return;
      }

      // now they have everything okay so lets move on
      // creating the s3 wallet transaction

      // !! This is not the perfect case if the payment fails then user could loss his/her money
      const keypair = Keypair.fromSecretKey(
        bs58.decode(process.env.WALLET_SECRET ?? "")
      );
      const connection = new Connection(
        "https://solana-devnet.g.alchemy.com/v2/ggElObM2tMIgAKq7VyByiJQjMn58Tg0R",
        "confirmed"
      );
      console.log(keypair.publicKey.toBase58());
      console.log(user.publicKey);
      const transaction = new Transaction().add(
        SystemProgram.transfer({
          fromPubkey: new PublicKey(
            "Byr7jq8udNbXjcKdh1U6ULydEdst6Xa5ucQMJyRVpxS7"
          ),
          toPubkey: new PublicKey(user.publicKey),
          lamports: convertToValidLamports(convertDollarToSOL(payout.amount)),
        })
      );

      console.log(`signature`);
      const signature = await sendAndConfirmTransaction(
        connection,
        transaction,
        [keypair]
      );
      console.log(signature);
      // create payment
      const payment = await db.payment.create({
        data: {
          organizationId: organization.id,
          userId: user.id,
          initialAmount: payout.amount,
          charges: 0,
          transferredAmount: payout.amount,
          signature,
          paidToCompany: false,
          body: `Payout of bounty is given to user ${user.username} generated by ${payout.generatedBy} of amount ${payout.amount}`,
        },
      });
      // create wallet trans

      const walletLast = await db.walletTransaction.findFirst({
        orderBy: {
          createdAt: "desc",
        },
      });
      let walletBalance = walletLast?.amount
        ? walletLast.amount - payout.amount
        : 0;
      const walletTransaction = await db.walletTransaction.create({
        data: {
          type: "DEBIT",
          userId: user.id,
          amount: payout.amount,
          totalWalletAmount: walletBalance,
          signature,
          paymentId: payment.id,
          body: `For org ${organization.name} paid for bounty to user ${user.username}`,
        },
      });

      // update payout
      await db.payout.update({
        where: {
          id: payout.id,
        },
        data: {
          paymentId: payment.id,
          status: "COLLECTED",
        },
      });
    });
    console.log(`Done boys this is done`);
    /*
  
    now we have payout here 
    find the user else put in the  jdfklasdjflk;as
    check org prce put iin falied
    step 1: release the payment for the user 
    step 2: create the payment for the payment model 
    step 3: create the wallet trnasactoin
    step 4: udpate the payout status 
    
    */
  },
  {
    connection: {
      host: "127.0.0.1",
      port: 6379,
    },
  }
);
